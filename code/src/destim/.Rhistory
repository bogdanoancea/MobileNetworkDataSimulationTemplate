eventLocProb.dt <- fread(file.path(path_data, 'probabilities_Vodafone.csv'), sep = ',', stringsAsFactors = FALSE)
setnames(eventLocProb.dt, c('t', 'Phone ID'), c('time', 'deviceID'))
eventLocProb.dt <- melt(eventLocProb.dt, id.vars = c('t', 'deviceID'), variable.name = 'tileID', variable.factor = FALSE, value.name = 'eventLocProb')[
, tileID := as.integer(substr(tileID, 5, nchar(tileID)))]
eventLocProb.dt <- fread(file.path(path_data, 'probabilities_Vodafone.csv'), sep = ',', stringsAsFactors = FALSE)
setnames(eventLocProb.dt, c('t', 'Phone ID'), c('time', 'deviceID'))
eventLocProb.dt <- melt(eventLocProb.dt, id.vars = c('time', 'deviceID'), variable.name = 'tileID', variable.factor = FALSE, value.name = 'eventLocProb')[
, tileID := as.integer(substr(tileID, 5, nchar(tileID)))]
### Network events                                                          ####
eventsFileName <- file.path(path_data, 'AntennaInfo_MNO_Vodafone.csv')
events.dt <- fread(eventsFileName, sep = ',', stringsAsFactors = FALSE,
colClasses = c('numeric', 'character', 'character', 'character',
'numeric', 'numeric', 'character'))
setnames(events.dt, c('t', 'antennaID', 'eventCode', 'deviceID', 'x', 'y', 'tileID'))
events.dt <- events.dt[eventCode != 1]
### Grid and map                                                            ####
gridParFileName <- file.path(path_data, 'grid.csv')
gridParam <- fread(gridParFileName, sep = ',', header = TRUE, stringsAsFactors = FALSE)
map <- readWKT(readLines(file.path(path_data, "map.wkt")))
### Coverage area                                                           ####
coverageAreaFileName <- file.path(path_data, 'AntennaCells_Vodafone.csv')
coverArea <- fread(coverageAreaFileName, sep ='\n', header = TRUE, stringsAsFactors = FALSE)
setnames(coverArea, 'lines')
coverArea[, antennaID := tstrsplit(lines, split = ',POLYGON')[[1]]]
coverArea[, wkt := substring(lines, regexpr("POLYGON", lines))]
coverArea <- coverArea[, c('antennaID', 'wkt'), with = FALSE]
antennas <- coverArea[['antennaID']]
coverArea <- lapply(coverArea[['wkt']], function(wkt){
polygon <- readWKT(wkt)
polygon <- intersect(polygon, map)
return(polygon)
})
names(coverArea) <- antennas
coverArea_sf <- lapply(coverArea, st_as_sf)
###                            :::::::::::::::                              ####
#####                        GENERAL PARAMETERS                            #####
### Time                                                                    ####
T <- length(unique(events.dt$t))
initialTime <- min(as.integer(events.dt$t))
finalTime <- max(as.integer(events.dt$t))
### Grid and map                                                            ####
ncol_grid <- gridParam[['No Tiles Y']]
nrow_grid <- gridParam[['No Tiles X']]
### Device
devID <- '63'
###                            :::::::::::::::                              ####
#####                           PREPARE DATA                               #####
### Event location probability matrix                                       ####
tileEquiv.dt <- data.table(tileEquivalence(ncol_grid, nrow_grid))
eventLocProb.dt <- eventLocProb.dt[tileEquiv.dt, on = 'tileID']
eventMatrix <- as.matrix(dcast(eventLocProb.dt[deviceID == devID], rasterCellID ~ t, value.var = 'eventLocProb')[
, rasterCellID := NULL])
### Event antenna ID
eventAntennaID.list <- lapply(split(events.dt, by = 'deviceID', keep.by = FALSE), function(DT){
tempDT <- merge(data.table(t = initialTime:finalTime),
DT[, c('t', 'antennaID'), with = FALSE], by = 't', all.x = TRUE)
antID <- tempDT$antennaID
return(antID)
})
###                            :::::::::::::::                              ####
#####                           PREPARE DATA                               #####
### Event location probability matrix                                       ####
tileEquiv.dt <- data.table(tileEquivalence(ncol_grid, nrow_grid))
eventLocProb.dt <- eventLocProb.dt[tileEquiv.dt, on = 'tileID']
eventMatrix <- as.matrix(dcast(eventLocProb.dt[deviceID == devID], rasterCellID ~ t, value.var = 'eventLocProb')[
, rasterCellID := NULL])
### Event antenna ID
eventAntennaID.list <- lapply(split(events.dt, by = 'deviceID', keep.by = FALSE), function(DT){
tempDT <- merge(data.table(t = initialTime:finalTime),
DT[, c('time', 'antennaID'), with = FALSE], by = 'time', all.x = TRUE)
antID <- tempDT$antennaID
return(antID)
})
###                            :::::::::::::::                              ####
#####                           PREPARE DATA                               #####
### Event location probability matrix                                       ####
tileEquiv.dt <- data.table(tileEquivalence(ncol_grid, nrow_grid))
eventLocProb.dt <- eventLocProb.dt[tileEquiv.dt, on = 'tileID']
eventMatrix <- as.matrix(dcast(eventLocProb.dt[deviceID == devID], rasterCellID ~ t, value.var = 'eventLocProb')[
, rasterCellID := NULL])
### Event antenna ID
eventAntennaID.list <- lapply(split(events.dt, by = 'deviceID', keep.by = FALSE), function(DT){
tempDT <- merge(data.table(time = initialTime:finalTime),
DT[, c('time', 'antennaID'), with = FALSE], by = 'time', all.x = TRUE)
antID <- tempDT$antennaID
return(antID)
})
events.dt
### Network events                                                          ####
eventsFileName <- file.path(path_data, 'AntennaInfo_MNO_Vodafone.csv')
events.dt <- fread(eventsFileName, sep = ',', stringsAsFactors = FALSE,
colClasses = c('numeric', 'character', 'character', 'character',
'numeric', 'numeric', 'character'))
setnames(events.dt, c('time', 'antennaID', 'eventCode', 'deviceID', 'x', 'y', 'tileID'))
events.dt <- events.dt[eventCode != 1]
### Grid and map                                                            ####
gridParFileName <- file.path(path_data, 'grid.csv')
gridParam <- fread(gridParFileName, sep = ',', header = TRUE, stringsAsFactors = FALSE)
map <- readWKT(readLines(file.path(path_data, "map.wkt")))
### Coverage area                                                           ####
coverageAreaFileName <- file.path(path_data, 'AntennaCells_Vodafone.csv')
coverArea <- fread(coverageAreaFileName, sep ='\n', header = TRUE, stringsAsFactors = FALSE)
setnames(coverArea, 'lines')
coverArea[, antennaID := tstrsplit(lines, split = ',POLYGON')[[1]]]
coverArea[, wkt := substring(lines, regexpr("POLYGON", lines))]
coverArea <- coverArea[, c('antennaID', 'wkt'), with = FALSE]
antennas <- coverArea[['antennaID']]
coverArea <- lapply(coverArea[['wkt']], function(wkt){
polygon <- readWKT(wkt)
polygon <- intersect(polygon, map)
return(polygon)
})
names(coverArea) <- antennas
coverArea_sf <- lapply(coverArea, st_as_sf)
###                            :::::::::::::::                              ####
#####                        GENERAL PARAMETERS                            #####
### Time                                                                    ####
T <- length(unique(events.dt$t))
initialTime <- min(as.integer(events.dt$t))
finalTime <- max(as.integer(events.dt$t))
### Grid and map                                                            ####
ncol_grid <- gridParam[['No Tiles Y']]
nrow_grid <- gridParam[['No Tiles X']]
### Device
devID <- '63'
###                            :::::::::::::::                              ####
#####                           PREPARE DATA                               #####
### Event location probability matrix                                       ####
tileEquiv.dt <- data.table(tileEquivalence(ncol_grid, nrow_grid))
eventLocProb.dt <- eventLocProb.dt[tileEquiv.dt, on = 'tileID']
eventMatrix <- as.matrix(dcast(eventLocProb.dt[deviceID == devID], rasterCellID ~ t, value.var = 'eventLocProb')[
, rasterCellID := NULL])
### Event antenna ID
eventAntennaID.list <- lapply(split(events.dt, by = 'deviceID', keep.by = FALSE), function(DT){
tempDT <- merge(data.table(time = initialTime:finalTime),
DT[, c('time', 'antennaID'), with = FALSE], by = 'time', all.x = TRUE)
antID <- tempDT$antennaID
return(antID)
})
### Time                                                                    ####
initialTime <- min(as.integer(events.dt$time))
finalTime <- max(as.integer(events.dt$time))
### Grid and map                                                            ####
ncol_grid <- gridParam[['No Tiles Y']]
nrow_grid <- gridParam[['No Tiles X']]
### Device
devID <- '63'
###                            :::::::::::::::                              ####
#####                           PREPARE DATA                               #####
### Event location probability matrix                                       ####
tileEquiv.dt <- data.table(tileEquivalence(ncol_grid, nrow_grid))
eventLocProb.dt <- eventLocProb.dt[tileEquiv.dt, on = 'tileID']
eventMatrix <- as.matrix(dcast(eventLocProb.dt[deviceID == devID], rasterCellID ~ t, value.var = 'eventLocProb')[
, rasterCellID := NULL])
### Event antenna ID
eventAntennaID.list <- lapply(split(events.dt, by = 'deviceID', keep.by = FALSE), function(DT){
tempDT <- merge(data.table(time = initialTime:finalTime),
DT[, c('time', 'antennaID'), with = FALSE], by = 'time', all.x = TRUE)
antID <- tempDT$antennaID
return(antID)
})
###                            :::::::::::::::                              ####
#####                           PREPARE DATA                               #####
### Event location probability matrix                                       ####
tileEquiv.dt <- data.table(tileEquivalence(ncol_grid, nrow_grid))
eventLocProb.dt <- eventLocProb.dt[tileEquiv.dt, on = 'tileID']
eventMatrix <- as.matrix(dcast(eventLocProb.dt[deviceID == devID], rasterCellID ~ time, value.var = 'eventLocProb')[
, rasterCellID := NULL])
### Event antenna ID
eventAntennaID.list <- lapply(split(events.dt, by = 'deviceID', keep.by = FALSE), function(DT){
tempDT <- merge(data.table(time = initialTime:finalTime),
DT[, c('time', 'antennaID'), with = FALSE], by = 'time', all.x = TRUE)
antID <- tempDT$antennaID
return(antID)
})
###                            :::::::::::::::                              ####
#####                             BUILD HMM                                #####
model <- HMMrectangle(nrow_grid, ncol_grid)
emissions(model) <- eventMatrix
model <- initparams(model)
model <- minparams(model)
model <- fit(model, eventAntennaID.list[[devID]])
postLocProb.mat <- sstates(model, eventAntennaID.list[[devID]])
postLocProb.dt <- copy(eventLocProb.dt[deviceID == devID])[, postLocProb := as.vector(postLocProb.mat)]
###                            :::::::::::::::                              ####
#####                             BUILD HMM                                #####
model <- HMMrectangle(nrow_grid, ncol_grid)
emissions(model) <- eventMatrix
model <- initparams(model)
model <- minparams(model)
model <- fit(model, eventAntennaID.list[[devID]])
postLocProb.mat <- sstates(model, eventAntennaID.list[[devID]])
postLocProb.dt <- copy(eventLocProb.dt[deviceID == devID])[, postLocProb := as.vector(postLocProb.mat)]
eventAntennaID.list[[devID]]
model <- fit(model, eventAntennaID.list[[devID]])
model <- minparams(model)
model <- initparams(model)
model <- minparams(model)
model <- fit(model, eventAntennaID.list[[devID]])
events.dt
unique(events.dt$deviceID)
devID <- '32'
###                            :::::::::::::::                              ####
#####                           PREPARE DATA                               #####
### Event location probability matrix                                       ####
tileEquiv.dt <- data.table(tileEquivalence(ncol_grid, nrow_grid))
eventLocProb.dt <- eventLocProb.dt[tileEquiv.dt, on = 'tileID']
eventMatrix <- as.matrix(dcast(eventLocProb.dt[deviceID == devID], rasterCellID ~ time, value.var = 'eventLocProb')[
, rasterCellID := NULL])
### Event antenna ID
eventAntennaID.list <- lapply(split(events.dt, by = 'deviceID', keep.by = FALSE), function(DT){
tempDT <- merge(data.table(time = initialTime:finalTime),
DT[, c('time', 'antennaID'), with = FALSE], by = 'time', all.x = TRUE)
antID <- tempDT$antennaID
return(antID)
})
###                            :::::::::::::::                              ####
#####                             BUILD HMM                                #####
model <- HMMrectangle(nrow_grid, ncol_grid)
emissions(model) <- eventMatrix
model <- initparams(model)
model <- minparams(model)
model <- fit(model, eventAntennaID.list[[devID]])
postLocProb.mat <- sstates(model, eventAntennaID.list[[devID]])
postLocProb.dt <- copy(eventLocProb.dt[deviceID == devID])[, postLocProb := as.vector(postLocProb.mat)]
postLocProb.dt
postLocProb.dt <- copy(eventLocProb.dt[deviceID == devID])[
, eventLoc := NULL][
, eventLoc := as.vector(postLocProb.mat)]
model <- HMMrectangle(nrow_grid, ncol_grid)
emissions(model) <- eventMatrix
model <- initparams(model)
model <- minparams(model)
model <- fit(model, eventAntennaID.list[[devID]])
postLocProb.mat <- sstates(model, eventAntennaID.list[[devID]])
postLocProb.dt <- copy(eventLocProb.dt[deviceID == devID])[
, eventLoc := as.vector(postLocProb.mat)]
plotDevice(devID, postLocProb.dt, map, eventLoc, gridParam, antenna.dt, coverArea)
postLocProb.dt
eventLocProb.dt
### Event location probabilities                                            ####
eventLocProb.dt <- fread(file.path(path_data, 'probabilities_Vodafone.csv'), sep = ',', stringsAsFactors = FALSE)
setnames(eventLocProb.dt, c('t', 'Phone ID'), c('time', 'deviceID'))
eventLocProb.dt <- melt(eventLocProb.dt, id.vars = c('time', 'deviceID'), variable.name = 'tileID', variable.factor = FALSE, value.name = 'eventLocProb')[
, tileID := as.integer(substr(tileID, 5, nchar(tileID)))]
eventLocProb.dt
tileEquiv.dt <- data.table(tileEquivalence(ncol_grid, nrow_grid))
eventLocProb.dt <- eventLocProb.dt[tileEquiv.dt, on = 'tileID']
eventLocProb.dt
### Event location probabilities                                            ####
eventLocProb.dt <- fread(file.path(path_data, 'probabilities_Vodafone.csv'), sep = ',', stringsAsFactors = FALSE)
setnames(eventLocProb.dt, c('t', 'Phone ID'), c('time', 'deviceID'))
eventLocProb.dt <- melt(eventLocProb.dt, id.vars = c('time', 'deviceID'), variable.name = 'tileID', variable.factor = FALSE, value.name = 'eventLocProb')[
, tileID := as.integer(substr(tileID, 5, nchar(tileID)))]
tileEquiv.dt <- data.table(tileEquivalence(ncol_grid, nrow_grid))
eventLocProb.dt <- eventLocProb.dt[tileEquiv.dt, on = 'tileID'][
, tileID := NULL]
setnames(eventLocProb.dt, 'rasterCellID', 'tile')
eventLocProb.dt
eventMatrix <- as.matrix(dcast(eventLocProb.dt[deviceID == devID], tile ~ time, value.var = 'eventLocProb')[
, rasterCellID := NULL])
eventMatrix <- as.matrix(dcast(eventLocProb.dt[deviceID == devID], tile ~ time, value.var = 'eventLocProb')[
, tile := NULL])
eventMatrix
### Event antenna ID
eventAntennaID.list <- lapply(split(events.dt, by = 'deviceID', keep.by = FALSE), function(DT){
tempDT <- merge(data.table(time = initialTime:finalTime),
DT[, c('time', 'antennaID'), with = FALSE], by = 'time', all.x = TRUE)
antID <- tempDT$antennaID
return(antID)
})
###                            :::::::::::::::                              ####
#####                             BUILD HMM                                #####
model <- HMMrectangle(nrow_grid, ncol_grid)
emissions(model) <- eventMatrix
model <- initparams(model)
model <- minparams(model)
model <- fit(model, eventAntennaID.list[[devID]])
postLocProb.mat <- sstates(model, eventAntennaID.list[[devID]])
postLocProb.dt <- copy(eventLocProb.dt[deviceID == devID])[
, eventLoc := as.vector(postLocProb.mat)]
library(gganimate)
plotDevice(devID, postLocProb.dt, map, eventLoc, gridParam, antenna.dt, coverArea)
postLocProb.dt
postLocProb.dt <- copy(eventLocProb.dt[deviceID == devID])[
, eventLoc := as.vector(postLocProb.mat)][
, eventLocProb := NULL]
plotDevice(devID, postLocProb.dt, map, eventLoc, gridParam, antenna.dt, coverArea)
?plotDevice
eventLocProb.dt
events.dt
plotDevice(devID, events.dt, map, postLocProb.dt, gridParam, antenna.dt, coverArea)
events.dt
eventsFileName <- file.path(path_data, 'AntennaInfo_MNO_Vodafone.csv')
events.dt <- fread(eventsFileName, sep = ',', stringsAsFactors = FALSE,
colClasses = c('numeric', 'character', 'character', 'character',
'numeric', 'numeric', 'character'))
setnames(events.dt, c('time', 'antennaID', 'eventCode', 'deviceID', 'x', 'y', 'tileID'))
events.dt <- events.dt[
eventCode != 1][
, eventCode := NULL]
plotDevice(devID, events.dt, map, postLocProb.dt, gridParam, antenna.dt, coverArea)
events.dt
eventsFileName <- file.path(path_data, 'AntennaInfo_MNO_Vodafone.csv')
events.dt <- fread(eventsFileName, sep = ',', stringsAsFactors = FALSE,
colClasses = c('numeric', 'character', 'character', 'character',
'numeric', 'numeric', 'character'))
setnames(events.dt, c('time', 'antennaID', 'eventCode', 'deviceID', 'x', 'y', 'tile'))
events.dt <- events.dt[
eventCode != 1][
, eventCode := NULL]
plotDevice(devID, events.dt, map, postLocProb.dt, gridParam, antenna.dt, coverArea)
postLocProb.dt
eventLocProb.dt
RSSfileName <- file.path(path_data, 'SignalQuality_Vodafone.csv')
RSS <- fread(RSSfileName, sep = ",", header = TRUE,
stringsAsFactors = FALSE)
RSS
library(StQ)
library(RepoReadWrite)
library(contObsPredModelParam)
ObsPredPar <- readRDS('G:/GRUPO_SINODO_METODOLOGIA/DepSel_Auto-dev/data/E30103/E30103.ObsPredPar.MM102019.rds')
ObsPredPar@Data
ObsPredPar@Data[NOrden == '178970487MM']
dcast_StQ(ObsPredPar@Data[NOrden == '178970487MM'])
dcast_StQ(ObsPredPar@Data[NOrden == '178970487MM'], UnitNames = TRUE)
GlobalScore <- readRDS('G:/GRUPO_SINODO_METODOLOGIA/DepSel_Auto-dev/data/E30103/E30103.GlobalScore.MM102019.rds')
GlobalScore
IDDDToUnitNames('Parametro_04.__6.2.1.', ObsPredPar@Data$DD)
IDDDToUnitNames('Parametro_04.__5.2.1.1.', ObsPredPar@Data$DD)
GlobalScore[NOrden == '178970487MM']
ErrorMoments <- readRDS('G:/GRUPO_SINODO_METODOLOGIA/DepSel_Auto-dev/data/E30103/E30103.ErrorMoments.MM102019.rds')
ErrorMoments
dcast_StQ(ObsPredPar@Data[NOrden == '178970487MM'], UnitNames = TRUE)
ErrorMoments@Domains
dcast_StQ(ObsPredPar@Data[NOrden == '178970487MM'], UnitNames = TRUE)[GeoLoc_35._6._2.1._1.2.3._ == '03']
ErrorMoments@Domains[GeoLoc_35._6._2.1._1.2.3._ == '03']
sapply(ErrorMoments@Units, `[`, '178970487MM')
sapply(ErrorMoments@Units, `[`, '178970487MM', on = 'NOrden')
sapply(ErrorMoments@Units, function(DT) DT[NOrden == '178970487MM'])
which(length(sapply(ErrorMoments@Units, function(DT) DT[NOrden == '178970487MM'])) != 0)
length(sapply(ErrorMoments@Units, function(DT) DT[NOrden == '178970487MM']))
length(sapply(ErrorMoments@Units, function(DT) DT[NOrden == '178970487MM']) != 0)
sapply(ErrorMoments@Units, function(DT) DT[NOrden == '178970487MM'])
sapply(ErrorMoments@Units, function(DT) DT[NOrden == '178970487MM'])->x
x
which(x == '178970487MM')
ErrorMoments@Moments[[24]]
units.24 <- ErrorMoments@Units[[24]]
units.24
moments.24 <- ErrorMoments@Moments[[24]]
moments.24
split(moments.24, rep(1:8, 80))
split(moments.24, rep(1:8, 80))8 * 80
8 * 80
split(moments.24$v, rep(1:8, 80))8 * 80
split(moments.24$v, rep(1:8, 80))
editVariable_U     <- c(IngTotales = 'logv9',
IngAlimentacion = 'logv3',
IngEquipoPersonal = 'logv4',
IngEquipoHogar = 'logv5',
IngSalud = 'logv6',
IngOcio = 'logv7',
IngOtrosBienes = 'logv8',
PersonalTotal = 'PerTotal')
split(moments.24$v, rep(1:8, 80)) -> tempMoments
names(tempMoments) -> editVariable_U
editVariable_U
tempMoments
editVariable_U     <- c(IngTotales = 'logv9',
IngAlimentacion = 'logv3',
IngEquipoPersonal = 'logv4',
IngEquipoHogar = 'logv5',
IngSalud = 'logv6',
IngOcio = 'logv7',
IngOtrosBienes = 'logv8',
PersonalTotal = 'PerTotal')
names(tempMoments) <- editVariable_U
tempMoments
as.data.table(tempMoments)[, NOrden := units.24]
library(data.table)
as.data.table(tempMoments)[, NOrden := units.24]
as.data.table(tempMoments)[, NOrden := units.24]-> x
x
x[NOrden == '178970487MM']
dcast_StQ(ObsPredPar@Data[NOrden == '178970487MM'], UnitNames = TRUE) -> ObsPredPar.178970487MM
ObsPredPar.178970487MM
library(SelEditFunctions)
?SelEditFunctions::AbsLossErrorMoment
AbsLossErrorMoment(11.06509, 11.03096, 0.03847736, 0, 5.2, 0)
ErrorMoments@VarNames
AbsLossErrorMoment(0, 0, 0, 0, 5.2, 0)
GlobalScore
GlobalScore.178970487MM <- GlobalScore[NOrden == '178970487MM']
GlobalScore.178970487MM
Mom
x
ErrorMoments.178970487MM <- x[NOrden == '178970487MM']
ErrorMoments.178970487MM
ObsPredPar.178970487MM
AbsLossErrorMoment(7, 7, 0.7385354, 0, 5.2, 0)
AbsLossErrorMoment(11.06509, 11.03096, 0.03847736, 0, 5.2, 0)
AbsLossErrorMoment(0, 0, 0, 0, 5.2, 0)
AbsLossErrorMoment(11.06509, 11.03096, 0.03847736, 0, 5.2, 0)
AbsLossErrorMoment(11.06509, 6, 34, 0, 3, 0)
DD <- ObsPredPar@Data$DD
editVariable_R <- UnitToIDDDNames(editVariable_U, DD)
editVariable_R
## Variables de dominio                                                     ####
grupo_V1 <- new(Class = 'Variable',
UnitName = 'grupo',
IDDD = 'ActivEcono',
QualsValues = list(NOrden = '', TipoMicrodato = '35.', TareaProceso = '6.', Clasificacion = '2.6.2.2.'),
Length = '5',
ClassVar = 'character',
ValueRegExp = '[A-Z]',
Formula = '',
SlotName = 'MicroData',
Literal = '',
DDversion = '1')
grupo_V2 <- new(Class = 'Variable',
UnitName = 'grupo',
IDDD = 'ActivEcono',
QualsValues = list(NOrden = '', TipoMicrodato = '35.', TareaProceso = '6.', Clasificacion = '2.6.2.2.', EsModif = ''),
Length = '75',
ClassVar = 'character',
ValueRegExp = '[A-Z]',
Formula = '',
SlotName = 'MicroData',
Literal = '',
DDversion = '2')
grupo <- list(V1 = grupo_V1, V2 = grupo_V2)
ccaa_V1 <- new(Class = 'Variable',
UnitName = 'ccaa',
IDDD = 'GeoLoc',
QualsValues = list(NOrden = '', TipoMicrodato = '35.', TareaProceso = '2.', RolProceso = '2.1.', Clasificacion = '1.2.3.'),
Length = '52',
ClassVar = 'character',
ValueRegExp = '([1-9]([0-9]+)?\\.)+',
Formula = '',
SlotName = 'MicroData',
Literal = '',
DDversion = '1')
ccaa_V2 <- new(Class = 'Variable',
UnitName = 'ccaa',
IDDD = 'GeoLoc',
QualsValues = list(NOrden = '', TipoMicrodato = '35.', TareaProceso = '6.', RolProceso = '2.1.', Clasificacion = '1.2.3.', EsModif = ''),
Length = '52',
ClassVar = 'character',
ValueRegExp = '([1-9]([0-9]+)?\\.)+',
Formula = '',
SlotName = 'MicroData',
Literal = '',
DDversion = '2')
ccaa <- list(V1 = ccaa_V1, V2 = ccaa_V2)
VarDominios.list <- list(grupo = grupo, ccaa  = ccaa)
### Variables
VarDominios_U.list <- lapply(VarDominios.list, function(lst){lapply(lst, function(z)z@UnitName)})
VarDominios_R.list <- lapply(VarDominios_U.list, function(lst){
name_R <- lapply(names(lst), function(DDvers){
UnitToIDDDNames(lst[[DDvers]], DD.list[[DDvers]])
})
names(name_R) <- names(lst)
return(name_R)
})
domainVars_R
domainVars_R <- sapply(VarDominios_R.list, `[[`, currentDDversion)
VarDominios_U.list <- lapply(VarDominios.list, function(lst){lapply(lst, function(z)z@UnitName)})
VarDominios_R.list <- lapply(VarDominios_U.list, function(lst){
name_R <- lapply(names(lst), function(DDvers){
UnitToIDDDNames(lst[[DDvers]], DD.list[[DDvers]])
})
names(name_R) <- names(lst)
return(name_R)
})
VarDominios_U.list <- lapply(VarDominios.list, function(lst){lapply(lst, function(z)z@UnitName)})
VarDominios_R.list <- lapply(VarDominios_U.list, function(lst){
name_R <- lapply(names(lst), function(DDvers){
UnitToIDDDNames(lst[[DDvers]], DD)
})
names(name_R) <- names(lst)
return(name_R)
})
VarDominios_R.list
editVariable_R
domainVars_R
VarDominios_R.list
domainVars_R <- sapply(VarDominios_R.list, `[[`, 'V2')
domainVars_R
names(domainVars_R) <- names(VarDominios_U.list)
domainVars_R
editVariable_R
domainVars_R
MedianImpParam <- new(Class = 'MedianImputationParam',
VarNames = editVariable_R,
DomainNames = domainVars_R)
ObsPredModHomosk
ObsPredModHomosk <- TRUE
#####                          :::::::::::::::                              ####
#####                 PARÁMETROS DE SELECCIÓN DE UNIDADES                   ####
ObsPredModHomosk <- rep(FALSE, length(editVariable_U))
AbsLossPar <- new(Class = 'AbsLossErrorMomentParam',
VarNames =  editVariable_R,
Homoskedastic = ObsPredModHomosk,
Imputation = MedianImpParam)
saveRDS(AbsLossPar, 'C:\AbsLossPar.rds')
saveRDS(AbsLossPar, 'C:/AbsLossPar.rds')
devtools::load_all(".")
library(destim)
install.packages("knitr")
install.packages('roxygen2')
library(destim)
